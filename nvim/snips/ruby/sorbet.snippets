snippet tsig "extends T::Sig"
extend T::Sig
endsnippet

snippet ty "# typed: true"
# typed: true

$0
endsnippet

snippet sig "sig do params(param: Type).returns(Type) end"
sig do
	${1:params($2)}
		${3:.${4:returns(${5:type})}}
end
endsnippet

snippet part "param: Type(,)" i
${1:param}: ${2:type}${3:, }
endsnippet

snippet si "sig { cursor }"
sig { $1 }
endsnippet

snippet sigr "sig { params(params).returns(Type) }"
sig { ${1:params(${2:param}: ${3:type}).}returns(${4:type}) }
endsnippet

snippet sigv "sig { params(params).void }"
sig { ${1:params(${2:param}: ${3:type}).}void }
endsnippet

snippet params "class SomethingParams < T::Struct ... end"
class ${1:Something}Params < T::Struct
	$0
end
endsnippet

snippet const "const :name, Type, default: x"
const :${1:name}, ${2:Type}${3:, default:${4: value}}
endsnippet

snippet nil "T.nilable(Type)" i
T.nilable(${1:Type})
endsnippet

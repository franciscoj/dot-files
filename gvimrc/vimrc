set shell=zsh
set nocompatible
let mapleader=","

if has('vim_starting')
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

call neobundle#rc(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
NeoBundleFetch 'Shougo/neobundle.vim'

NeoBundle 'Shougo/vimproc', {
      \ 'build' : {
      \     'windows' : 'make -f make_mingw32.mak',
      \     'cygwin' : 'make -f make_cygwin.mak',
      \     'mac' : 'make -f make_mac.mak',
      \     'unix' : 'make -f make_unix.mak',
      \    },
      \ }
NeoBundle 'Shougo/unite.vim'

NeoBundle 'vim-ruby/vim-ruby'
NeoBundle 'ecomba/vim-ruby-refactoring'
NeoBundle 'noprompt/vim-yardoc'
NeoBundle 'tpope/vim-rails'
NeoBundle 'tpope/vim-rake'
NeoBundle 'Textile-for-VIM'
NeoBundle 'tpope/vim-cucumber'
NeoBundle 'tpope/vim-haml'
NeoBundle 'tpope/vim-markdown'
NeoBundle 'suan/vim-instant-markdown'
NeoBundle 'groenewege/vim-less'
NeoBundle 'pangloss/vim-javascript'
NeoBundle 'kchmck/vim-coffee-script'
NeoBundle 'jgdavey/vim-blockle'
NeoBundle 'evanmiller/nginx-vim-syntax'
NeoBundle 'puppetlabs/puppet-syntax-vim'
NeoBundle 'tangledhelix/vim-octopress'
NeoBundle 'altercation/vim-colors-solarized'

NeoBundle 'tpope/vim-git'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'gregsexton/gitv'
NeoBundle 'mhinz/vim-signify'

NeoBundle 'tpope/vim-surround'
NeoBundle 'tpope/vim-ragtag'
NeoBundle 'tpope/vim-commentary'
NeoBundle 'tpope/vim-repeat'
NeoBundle 'tpope/vim-endwise'
NeoBundle 'tpope/vim-unimpaired'
NeoBundle 'tpope/vim-rsi'
NeoBundle 'mbbill/undotree'
NeoBundle 'edsono/vim-matchit'
NeoBundle 'Raimondi/delimitMate'
NeoBundle 'godlygeek/tabular'
NeoBundle 'textobj-user'
NeoBundle 'nelstrom/vim-textobj-rubyblock'
NeoBundle 'scrooloose/syntastic'
NeoBundle 'scrooloose/nerdtree'

NeoBundle 'xolox/vim-easytags'
NeoBundle 'xolox/vim-misc'
NeoBundle 'tpope/vim-bundler'

NeoBundle 'jgdavey/tslime.vim'
NeoBundle 'jgdavey/vim-turbux'
NeoBundle 'bling/vim-airline'
NeoBundle 'tpope/vim-eunuch'

NeoBundle "MarcWeber/vim-addon-mw-utils"
NeoBundle "tomtom/tlib_vim"
NeoBundle "honza/vim-snippets"
NeoBundle "garbas/vim-snipmate"

" ******************************************************************************
" Unite
" ******************************************************************************

call unite#filters#matcher_default#use(['matcher_fuzzy'])
let g:unite_prompt = '» '
let g:unite_source_grep_command = 'ack'
let g:unite_source_grep_default_opts = '--no-heading --no-color -H'
let g:unite_source_grep_recursive_opt = ''
let g:unite_source_history_yank_enable = 1
let g:unite_source_file_rec_max_cache_files = 0
call unite#custom#source('file_mru,file_rec,file_rec/async,grepocate',
        \ 'max_candidates', 0)

nnoremap ff :Unite -start-insert file_rec/async:!<CR>
nnoremap fa :Unite grep:.<cr>
nnoremap fy :<C-u>Unite history/yank<CR>
nnoremap fb :Unite -quick-match buffer<cr>

" ******************************************************************************
" Make it pretty
" ******************************************************************************
set background=dark
let g:solarized_termcolors = 16
colorscheme solarized

set number
set cursorline
set colorcolumn=81
set list
set listchars=tab:>\ ,eol:¬,trail:·
set diffopt+=iwhite,filler
set cpoptions+=$ " Mark with a $ at the end of a 'change' command
set showcmd
set laststatus=2 " Always show status line.
set noautochdir

" Filetype highlighting and indentation activation
syntax on
filetype on
filetype plugin on
filetype indent on

" Pretty indexing with 2 spaces
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab

" Search config
set hlsearch " Auto highlight search
set incsearch " Incremental search
set ignorecase " Ignore case during search
set smartcase " Be smart when matching case on the search

" Default folding config
set foldmethod=indent
set foldnestmax=10
set nofoldenable
set foldlevel=1

" Others
set scrolloff=3 " Leave 3 lines before start scrolling
set backspace=indent,eol,start " Better when removing lines

" English spelling by default
set spell
set spelllang=en_us

" Auto complete options
set completeopt=longest,menu
set complete=.,w,b,u,t
set wildmode=longest,list:longest

set pastetoggle=<F3>
set showmode

set nobackup
set noswapfile

runtime macros/matchit.vim " Needed for the ruby block object plugin

" Filetype config for some missing files on vim-ruby
autocmd BufRead,BufNewFile {caprc,.caprc,Thorfile} set ft=ruby
" Filetype config for nginx conf files
autocmd BufRead,BufNewFile /opt/nginx/conf/* set ft=nginx

" Set auto completion for ruby files
autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete
autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1

" Set comment type for nginx
autocmd FileType nginx set commentstring=#\ %s
" Comment type for dnsmasq config files
autocmd BufRead,BufNewFile /usr/local/etc/dnsmasq.conf set commentstring=#\ %s

" Set text width to 80 chars on markdown files
au BufRead,BufNewFile *.md setlocal textwidth=80

" Open netrw when no argument specified
autocmd VimEnter * if !argc() | Explore | endif

" netrw config
let g:netrw_banner       = 0
let g:netrw_keepdir      = 0
let g:netrw_liststyle    = 3 " or 3
let g:netrw_sort_options = ''"

" Configuration for used plugins
let NERDTreeDirArrows=1

" Fixes incompatibility with NERDTree and vim-bundler
let g:NERDTreeHijackNetrw = 0

" Sintastic.vim config
let g:syntastic_enable_signs=1

" Force easytags.vim to take ctags from homebrew
if has("mac")
  let g:easytags_cmd = "/usr/local/bin/ctags"
elseif has("linux")
  let g:easytags_cmd = "/usr/bin/ctags"
end
let g:easytags_auto_highlight = 0

" Airline config
let g:airline_powerline_fonts = 1
let g:airline_theme='solarized'
let g:airline#extensions#tabline#enabled = 1
let ttimeoutlen=50

if has("persistent_undo")
  " set undodir = '~/.vim/undodir'
  " set undofile
endif

" Misc mappings
imap jj <ESC>

map ,f mmgg=G`m^
map <silent> <F2> :FixWhitespace<CR>
map <silent> ,n :noh<CR>
map ,e :e <C-R>=expand("%:p:h") . "/" <CR>
map ,te :tabe <C-R>=expand("%:p:h") . "/" <CR>

nnoremap <silent> ,<space> :NERDTreeToggle<CR>
nnoremap <F3> :set invpaste paste?<CR>
nnoremap ,u :UndotreeToggle<cr>

nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
nnoremap <silent> ,cc :close<CR>

nmap Q gqq
nmap <silent> ,,ev :e $MYVIMRC
nmap <silent> ,,sv :so $MYVIMRC
nmap <silent> ,gs :Gstatus<CR>
nmap <silent> ,gd :Gdiff<CR>
nmap <silent> ,gb :Gblame<CR>
" Tslime
nmap <C-c>r <Plug>SetTmuxVars

nmap <silent> ,a= :Tabularize /=<CR>
vmap <silent> ,a= :Tabularize /=<CR>
nmap <silent> ,a: :Tabularize /:<CR>
vmap <silent> ,a: :Tabularize /:<CR>
nmap <silent> ,a:: :Tabularize /:\zs<CR>
vmap <silent> ,a:: :Tabularize /:\zs<CR>
nmap <silent> ,a, :Tabularize /,<CR>
vmap <silent> ,a, :Tabularize /,<CR>
nmap <silent> ,a<Bar> :Tabularize /<Bar><CR>
vmap <silent> ,a<Bar> :Tabularize /<Bar><CR>

" Removes all traililing whitespaces from the buffer
function! s:FixWhitespace(line1,line2)
  let l:save_cursor = getpos(".")
  silent! execute ':' . a:line1 . ',' . a:line2 . 's/\s\+$//'
  call setpos('.', l:save_cursor)
endfunction
" Run :FixWhitespace to remove end of line white space.
command! -range=% FixWhitespace call <SID>FixWhitespace(<line1>,<line2>)

function! s:PrettifyXml()
  let l:save_cursor = getpos(".")
  silent! execute ':%s/\n//'
  silent! execute ':1,$!xmllint --format --recover - 2>/dev/null'
  " silent! execute "normal 2Gdd"
  silent! execute ':w'
  call setpos('.', l:save_cursor)
endfunction
command! PrettifyXml call <SID>PrettifyXml()

hi link yardType rubyConstant
hi link yardDuckType rubyMethod
hi link yardLiteral rubyString

" Don't really know what this does, but Vim is a bit more stable with
" RVM using this
set shell=/bin/bash
" No need to make it compatible with VI
set nocompatible
filetype off " Asked by Vundle

" ******************************************************************************
" Setup vundler and plugins
" ******************************************************************************
set rtp+=~/.vim/vundle.git/
call vundle#rc()
" File types"{{{
Bundle 'Textile-for-VIM'
Bundle 'tpope/vim-cucumber'
Bundle "pangloss/vim-javascript"
Bundle "tpope/vim-haml"
Bundle "tpope/vim-rails"
Bundle "bronson/vim-ruby-block-conv"
Bundle 'rubycomplete.vim'
Bundle 'hallettj/jslint.vim'
Bundle 'nginx.vim'
"}}}
" External tools"{{{
Bundle 'ack.vim'
Bundle 'tpope/vim-git'
Bundle 'tpope/vim-fugitive'
Bundle 'int3/vim-extradite'
"}}}
" Edition tools"{{{
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-ragtag'
Bundle 'tComment'
Bundle 'SuperTab-continued.'
Bundle "edsono/vim-matchit"
Bundle 'Raimondi/delimitMate'
Bundle 'tpope/vim-endwise'
Bundle "tpope/vim-unimpaired"
Bundle 'godlygeek/tabular'
Bundle "bronson/vim-trailing-whitespace"
Bundle 'textobj-user'
Bundle 'nelstrom/vim-textobj-rubyblock'
Bundle 'ecomba/vim-ruby-refactoring'
Bundle 'Syntastic'
"}}}
" Exploring and buffers"{{{
Bundle "scrooloose/nerdtree"
Bundle "msanders/snipmate.vim"
Bundle "ZoomWin"
Bundle "nathanaelkane/vim-indent-guides"
Bundle 'bufexplorer.zip'
Bundle 'YankRing.vim'
" Tags
Bundle 'xolox/vim-easytags'
Bundle 'taglist.vim'
" I'm just TESTING this
Bundle 'tpope/vim-repeat'
Bundle 'xolox/vim-notes'
"}}}

" ******************************************************************************
" Make it pretty
" ******************************************************************************
colorscheme railscasts
set guioptions=ac
set number
set cursorline
set colorcolumn=80 " Mark 80th column with a red line
set list
set listchars=tab:▸\ ,eol:¬,trail:. " Same invisibles as in TextMate
set diffopt+=iwhite
set cpoptions+=$ " Mark with a $ at the end of a 'change' command
set showcmd

" Some NERDTree options {{{
let NERDTreeDirArrows=1
"}}}

" Filetype highlighting and indentation activation"{{{
syntax on
filetype on
filetype plugin on
filetype indent on
"}}}
" Pretty indexing with 2 spaces"{{{
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
"}}}
" Statusline config"{{{
set laststatus=2 " Always show status line.
" Filename
set statusline=%<%f\ " Filename
" Preview, help, modified and readonly flags
set statusline+=%w%h%m%r
" Show fugitive.vim's GIT status
set statusline+=%{fugitive#statusline()} " Git Hotness
" Filetype
set statusline+=\%y
" Current dir
set statusline+=\ [%{getcwd()}]
" Warn about syntactic errors using Syntastic.vim
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
" Right aligned file nav info
set statusline+=%=%-14.(%l,%c%V%)\ %p%%
"}}}

" Sintastic.vim config
let g:syntastic_enable_signs=1

" ******************************************************************************
" Some defaults I like/need
" ******************************************************************************
set scrolloff=8 " Leave 8 lines before start scrolling
runtime macros/matchit.vim " Needed for the ruby block object plugin
set spell
set spelllang=en_us
set directory=~/.vim/swap,. " Store swap files in a common directory
" Searching"{{{
set hlsearch
set incsearch
set ignorecase
set smartcase"}}}

" Don't forget to set ft for Ruby files
au BufRead,BufNewFile {caprc,autotest,Capfile,Gemfile,Rakefile,Thorfile,Vagrantfile,Guardfile,config.ru,.caprc,*.thor} set ft=ruby
au BufRead,BufNewFile *_spec.rb set fdm=indent

" Auto save and load view (state) (folds, cursor, etc)"{{{
au BufWinLeave * silent! mkview
au BufWinEnter * silent! loadview
"}}}
" ******************************************************************************
" Auto completion
" ******************************************************************************
" Pretty auto completion"{{{
highlight Pmenu ctermbg=238 gui=bold
set wildmenu
set wildignore+=*.o,*.obj,.git,*.rbc
set wildmode=list:longest,list:full
set complete=.,w,t
"}}}
" Auto complete for ruby"{{{
autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete
autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
"}}}
" ******************************************************************************
" Some custom key mapping
" ******************************************************************************
" Misc mappings"{{{
let mapleader=","
imap jj <ESC>
map <silent> <F2> :FixWhitespace<CR>
map <silent> ,n :noh<CR>
map <silent> ,t :NERDTreeToggle<CR>
map <silent> ,,t :TlistToggle<CR>
map <silent> ,yr :YRShow<CR>
map <silent> ,z :ZoomWin<CR>
noremap ,a :Ack<space>
"}}}
" VIMRC mappings"{{{
nmap <silent> ,ev :e $MYVIMRC
nmap <silent> ,sv :so $MYVIMRC
"}}}
" Code indenting"{{{
imap ,f <Esc> mmgg=G`m^
map ,f mmgg=G`m^
"}}}
" GIT related mappings"{{{
nmap <silent> ,gs :Gstatus<CR>
nmap <silent> ,gd :Gdiff<CR>
nmap <silent> ,gl :Extradite<CR>
noremap ,g :Git<space>
"}}}
" Commenting mappings"{{{
nnoremap <silent>// :TComment<CR>
vnoremap <silent>// :TComment<CR>
"}}}
" Window mappings"{{{
noremap <silent> ,h :wincmd h<CR>
noremap <silent> ,j :wincmd j<CR>
noremap <silent> ,k :wincmd k<CR>
noremap <silent> ,l :wincmd l<CR>
noremap <silent> ,cc :close<CR>
"}}}
" Tabularize mappings"{{{
nmap <silent> ,a= :Tabularize /=<CR>
vmap <silent> ,a= :Tabularize /=<CR>
nmap <silent> ,a: :Tabularize /:<CR>
vmap <silent> ,a: :Tabularize /:<CR>
nmap <silent> ,a:: :Tabularize /:\zs<CR>
vmap <silent> ,a:: :Tabularize /:\zs<CR>
nmap <silent> ,a, :Tabularize /,<CR>
vmap <silent> ,a, :Tabularize /,<CR>
nmap <silent> ,a<Bar> :Tabularize /<Bar><CR>
vmap <silent> ,a<Bar> :Tabularize /<Bar><CR>
"}}}

" Align Cucumber tables with Tabular plugin"{{{
inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a
function! s:align()
  let p = '^\s*|\s.*\s|\s*$'
  if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
    let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
    let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
    Tabularize/|/l1
    normal! 0
    call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
  endif
endfunction
"}}}
" Source the snippets support functions"{{{
source ~/.vim/bundle/snipmate.vim/snippets/support_functions.vim

if has("gui_macvim")
  " set the vim windows size
  set lines=55 columns=150
  " Set the macvim font
  set guifont=Inconsolata:h16
endif
"}}}

" ******************************************************************************
" Misc functions
" ******************************************************************************
" Set backup directories"{{{
function! InitializeDirectories()
  let separator = "."
  let parent = $HOME
  let prefix = '.vim/'
  let dir_list = {
        \ 'backup': 'backupdir',
        \ 'views': 'viewdir',
        \ 'swap': 'directory' }

  for [dirname, settingname] in items(dir_list)
    let directory = parent . '/' . prefix . dirname . "/"
    if exists("*mkdir")
      if !isdirectory(directory)
        call mkdir(directory)
      endif
    endif
    if !isdirectory(directory)
      echo "Warning: Unable to create backup directory: " . directory
      echo "Try: mkdir -p " . directory
    else
      let directory = substitute(directory, " ", "\\\\ ", "")
      exec "set " . settingname . "=" . directory
    endif
  endfor
endfunction
call InitializeDirectories()"}}}

" vim: set fdm=marker:
